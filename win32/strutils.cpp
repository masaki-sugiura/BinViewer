// $Id$

#include "strutils.h"

const char* const hex = "0123456789ABCDEF";

//	文字の性質をビットで表現した配列
BYTE char_property[257] = {
	// 0x00 - 0x07
	0, 0, 0, 0, 0, 0, 0, 0,
	// 0x08, HT, LF, VT, FF, CR, 0x0e, 0x0f
	0, IS_SPACE|IS_READABLE, IS_SPACE|IS_READABLE, IS_SPACE|IS_READABLE,
	IS_SPACE|IS_READABLE, IS_SPACE|IS_READABLE, 0, 0,
	//	0x10 - 0x1f
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	// SPACE, !, ", #
	IS_SPACE|IS_READABLE, IS_READABLE, IS_READABLE, IS_READABLE,
	// $, %, &, '
	IS_READABLE, IS_READABLE, IS_READABLE, IS_READABLE,
	// (, ), *, +
	IS_READABLE, IS_READABLE, IS_READABLE, IS_READABLE,
	// ,, -, ., /
	IS_READABLE, IS_READABLE, IS_READABLE, IS_READABLE,
	// 0 - 9
	IS_DIGIT|IS_XDIGIT|IS_READABLE, IS_DIGIT|IS_XDIGIT|IS_READABLE,
	IS_DIGIT|IS_XDIGIT|IS_READABLE, IS_DIGIT|IS_XDIGIT|IS_READABLE,
	IS_DIGIT|IS_XDIGIT|IS_READABLE, IS_DIGIT|IS_XDIGIT|IS_READABLE,
	IS_DIGIT|IS_XDIGIT|IS_READABLE, IS_DIGIT|IS_XDIGIT|IS_READABLE,
	IS_DIGIT|IS_XDIGIT|IS_READABLE, IS_DIGIT|IS_XDIGIT|IS_READABLE,
	// :, ;, <, =, >, ?
	IS_READABLE, IS_READABLE,
	IS_READABLE, IS_READABLE, IS_READABLE, IS_READABLE,
	// @
	IS_TRAILBYTE|IS_READABLE,
	// A - Z
	IS_UPPERCASE|IS_XDIGIT|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_XDIGIT|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_XDIGIT|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_XDIGIT|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_XDIGIT|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_XDIGIT|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_UPPERCASE|IS_TRAILBYTE|IS_READABLE,
	// [, \, ], ^, _, `
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	// a - z
	IS_LOWERCASE|IS_XDIGIT|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_XDIGIT|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_XDIGIT|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_XDIGIT|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_XDIGIT|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_XDIGIT|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	IS_LOWERCASE|IS_TRAILBYTE|IS_READABLE,
	// {, |, }, ~, DEL
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_READABLE, // 0x7f
	// 0x80 - 0x9f
	IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	// 0xa0 - 0xdf
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	IS_TRAILBYTE|IS_READABLE, IS_TRAILBYTE|IS_READABLE,
	// 0xe0 - 0xef
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE, IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE, IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE, IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE, IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE, IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE, IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE, IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE, IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	// 0xf0 - 0xff
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE, IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE, IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE, IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE, IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE, IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE, IS_LEADBYTE|IS_TRAILBYTE|IS_READABLE,
	0, // 0xfd
	0, // 0xfe
	0, // 0xff
	0 // dummy
};

filesize_t
ParseNumber(LPCSTR str)
{
	while (*str && IsCharSpace(*str)) str++;
	if (!*str) return -1;
	else if (*str == '0') {
		str++;
		filesize_t num = 0;
		if (*str == 'x' || *str == 'X') {
			// hex
			for (;;) {
				str++;
				if (!IsCharXDigit(*str)) break;
				num <<= 4;
				num += xdigit(*str);
			}
		} else {
			// octal
			while (*str >= '0' && *str <= '7') {
				num <<= 3;
				num += *str - '0';
				str++;
			}
		}
		return num;
	} else if (IsCharDigit(*str)) {
		// decimal
		filesize_t num = 0;
		while (IsCharDigit(*str)) {
			num *= 10;
			num += *str - '0';
			str++;
		}
		return num;
	}
	return -1;
}

